#pragma once

#include <string>
#include <unordered_map>
#include <vector>

#include "engine/system/ISystem.h"
#include "engine/system/input/InputContext.h"
#include "engine/system/platform/Keyboard.h"

namespace ds
{
/**
 * The Input system manages input contexts. Input contexts are a collection of
 * key mappings, mapping a key code to a message.
 *
 * The input contexts are constructed from the config.json file.
 * Follow this example:
 * ...
 * "Input": {
 *   "InputContextName": {
 *     "keyName": "message string"
 *   },
 *   "Default": {
 *      "`": "console_toggle"
 *   }
 * }
 * ...
 *
 * A "Default" input context may exist and is the only input context to exist
 * on the input context stack by default. Input contexts can be pushed and
 * popped using the appropriate messages.
 */
class Input : public ISystem
{
public:
    /**
     * Initialize the input system.
     *
     * Returns FALSE if initialization fails.
     *
     * @param  config  const Config &, configuration loaded by the engine.
     * @return         bool, TRUE if initialization succeeds, FALSE otherwise.
     */
    virtual bool Initialize(const Config &config);

    /**
     * Update the input system over the given timestep.
     *
     * @param  deltaTime  float, timestep to update the system over.
     */
    virtual void Update(float deltaTime);

    /**
     * Perform teardown of the input system.
     */
    virtual void Shutdown();

    /**
     * Give messages to the input system.
     *
     * Messages are not handled in this method. Handling of events is deferred
     * to the Update method.
     *
     * @param  messages  const ds_msg::MessageStream &messages, messages to send
     * to the Message Bus.
     */
    virtual void PostMessages(const ds_msg::MessageStream &messages);

    /**
     * Collect messages generated by the console system.
     *
     * @return  ds_msg::MessageStream, stream of messages generated by this
     * system.
     */
    virtual ds_msg::MessageStream CollectMessages();

    /**
     * @copydoc ISystem::GetName()
     */
    virtual const char *GetName() const;

    /**
     * @copydoc ISystem::RegisterScriptBindings(lua_State *L)
     */
    virtual void RegisterScriptBindings(lua_State *L);

    /**
     * Return true if the given key name is pressed.
     *
     * @param   keyName  const std::string &, name of key.
     * @return           bool, TRUE if key is pressed, FALSE otherwise.
     */
    bool IsKeyPressed(const std::string &keyName) const;

    /**
     * Get the amount the mouse has moved in the x and y directions since the
     * last frame.
     *
     * Only works if Video.lockMouse is set to true in config.
     *
     * @param  xDelta  int *, where to store amount mouse has moved in x
     * direction since last frame (pixels).
     * @param  yDelta  int *, where to store amount mouse has moved in y
     * direction since last frame (pixels).
     */
    void GetMouseDeltaXY(int *xDelta, int *yDelta) const;

private:
    /**
     * Pre-populates the key name to key code map, mapping key name to a key
     * code.
     */
    void InitializeKeyNameToKeyCodeMap();

    /**
     * Get the key code for the given key name.
     *
     * @param   keyName  std::string, name of the key to get keycode for.
     * @param   key      ds_platform::Keyboard::Key *, where to place key code
     *                   if method is successful.
     * @return           bool, TRUE if key name is found, FALSE otherwise.
     */
    bool GetKeyCodeForKeyName(std::string keyName,
                              ds_platform::Keyboard::Key *key) const;

    /**
     * Process messages in the given message stream.
     *
     * @param  ds_msg::MessageStream *, messages to process.
     */
    void ProcessEvents(ds_msg::MessageStream *messages);

    // Map key string provided by user in their config to a key code
    // Eg. map "w" to Key::Key_w
    std::unordered_map<std::string, ds_platform::Keyboard::Key>
        m_keyNameToKeyCodeMap;

    // Input context stack
    std::vector<InputContext> m_inputContextStack;

    // All input contexts not on the stack
    std::vector<InputContext> m_inputContexts;

    ds_msg::MessageStream m_messagesGenerated, m_messagesReceived;
};
}
